{"version":3,"sources":["row.js","calculationRows.js","form.js","index.js"],"names":["Row","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculate","property","value","handleCalculate","formId","rowId","opportunity","myRef","React","createRef","state","_this2","react_default","a","createElement","className","channelData","channelName","type","size","clicks","onChange","event","parseInt","target","clickPrice","conversion","leads","leadPrice","channelCost","onClick","handleDeleteRow","version","meta","width","height","viewBox","fill","stroke","strokeWidth","d","Component","CalculationRows","indents","i","length","push","row","onDataChange","key","Form","change","param","setState","console","log","newChannelClick","handleSetCurrentForm","channelType","rows","rowData","leadSum","leadPriceSum","channelCostSum","sales","conversionInSales","handleData","bind","assertThisInitialized","newChannelData","_step","newLeadSum","newLeadPriceSum","newChannelCostSum","_iterator","_createForOfIteratorHelper","s","n","done","channel","err","e","f","name","_step2","_this3","leadSumCell","leadPriceSumCell","channelCostSumCell","_iterator2","resultLeadsCell","conversions","resultLeadPriceCell","handleDeleteForm","placeholder","calculationRows","colSpan","handleConversion","root","ReactDOM","createRoot","document","getElementById","Container","addRow","newFormData","formData","currentForm","querySelector","formSums","modalClass","newConversions","splice","newFormSums","currentRow","toFixed","Math","round","currentFormSums","form","src_form","action","id","defaultChecked","htmlFor","customerPrice","render","src_Container"],"mappings":"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","file":"static/js/main.996725df.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Row extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            // clicks: 3000,\n            // clickPrice: 30,\n            // conversion: 2,\n            // leads: this.props.leads,\n            // leadPrice: this.props.leadPrice,\n            // channelCost: this.props.channelCost,\n            // channelCost: function () {\n            //     return this.clicks * this.clickPrice;\n            // },\n            // a: {\n            //     clicks: 3000,\n            //     clickPrice: 30,\n            //     channelCost: function() {\n            //         return this.clicks + \" \" + this.clickPrice;\n            //       }\n            // }\n            // get channelCost() {\n            //     return this.clicks;\n            //   }\n        }\n    }\n\n    calculate = (property, value) => {\n        this.props.handleCalculate(this.props.formId, this.props.rowId, property, value, this.props.opportunity);\n        // this.setState({[property]: value});\n        // if (this.props.opportunity) {\n        //     this.setState((state, props) => ({\n        //         channelCost: state.clicks * state.clickPrice,\n        //         leadPrice: state.clickPrice * 100 / state.conversion,\n        //         leads: state.clicks * state.clickPrice / (state.clickPrice * 100 / state.conversion),\n        //     }), function() {\n        //         this.props.onDataChange({\n        //             rowId: this.props.rowId,\n        //             leads: this.state.leads,\n        //             leadPrice: this.state.leadPrice,\n        //             channelCost: this.state.channelCost,\n        //         });\n        //     });\n        // }\n        // else {\n        //     this.setState((state, props) => ({\n        //         clicks: (state.channelCost / state.clickPrice).toFixed(2),\n        //         leadPrice: state.clickPrice * 100 / state.conversion,\n        //         leads: (state.channelCost / Math.round(state.clickPrice * 100 / state.conversion)).toFixed(2),\n        //     }), function() {\n        //         this.props.onDataChange({\n        //             rowId: this.props.rowId,\n        //             leads: this.state.leads,\n        //             leadPrice: this.state.leadPrice,\n        //             channelCost: this.state.channelCost,\n        //         });\n        //     });\n        // }\n        // let currentTable = this.myRef.current.parentElement.parentElement;\n        // let rows = currentTable.getElementsByClassName(\"calculationRow\");\n        // let leadSumCell = currentTable.getElementsByClassName(\"leadSumCell\")[0];\n        // for (row of rows) {\n\n        // }\n        // console.log(currentTable);\n        \n    }\n\n    render() {\n        \n        return (\n            <tr className=\"calculationRow\">\n                <td>{this.props.channelData.channelName}</td>\n                <td>\n                    {\n                        this.props.opportunity ? <input type=\"text\" size=\"1\" value={this.props.channelData.clicks} className=\"clicksInput\" onChange={(event) => this.calculate(\"clicks\", parseInt(event.target.value))} /> : this.props.channelData.clicks\n                    }\n\n                </td>\n                <td><input type=\"text\" size=\"1\" value={this.props.channelData.clickPrice} className=\"clickPriceInput\" onChange={(event) => this.calculate(\"clickPrice\", parseInt(event.target.value))} />\n                </td>\n                <td><input type=\"text\" size=\"1\" value={this.props.channelData.conversion} className=\"conversionInput\" onChange={(event) => this.calculate(\"conversion\", parseInt(event.target.value))}/>\n                </td>\n                <td className=\"leadCell\">{this.props.channelData.leads}</td>\n                <td className=\"leadPriceCell\">{this.props.channelData.leadPrice}</td>\n                <td className=\"channelCostCell\">\n                    {\n                        this.props.opportunity ? this.props.channelData.channelCost : <input type=\"text\" size=\"1\" value={this.props.channelData.channelCost} className=\"clicksInput\" onChange={(event) => this.calculate(\"channelCost\", parseInt(event.target.value))}/>\n                    }\n                </td>\n                <td className='closeCell'>\n                    <button type=\"button\" onClick={() => this.props.handleDeleteRow(this.props.formId, this.props.rowId)} className=\"crossButton\">\n                        <svg version=\"1.1\" meta=\"vk-icons-close\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                            <path fill=\"none\" stroke=\"#000\" strokeWidth=\"1.06\" d=\"M16,16 L4,4\"></path>\n                            <path fill=\"none\" stroke=\"#000\" strokeWidth=\"1.06\" d=\"M16,4 L4,16\"></path>\n                        </svg>\n                    </button>\n                </td>\n            </tr>\n        )\n    }\n}\n\nexport default Row","import React from 'react';\nimport Row from './row.js';\n\n\nclass CalculationRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // channelData: this.props.channelData,\n        }\n    }\n\n    render() {\n        var indents = [];\n        // console.log(this.props);\n        for (var i = 0; i < this.props.channelData.length; i++) {\n            indents.push(<Row opportunity={this.props.opportunity} handleCalculate={this.props.handleCalculate} handleDeleteRow={this.props.handleDeleteRow} formId={this.props.formId} rowId={i} onDataChange={this.props.onDataChange} key={\"row\"+i} channelData={this.props.channelData[i]}/>);\n        }\n        return indents;\n    }\n}\n\nexport default CalculationRows","import React from 'react';\nimport Row from './row.js';\nimport CalculationRows from './calculationRows.js';\n\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formId: this.props.formId,\n            opportunity: true,\n            channelType: \"Яндекс.Директ\",\n            rows: [],\n            channelData: this.props.channelData,\n            rowData: [[]],\n            leadSum: 60,\n            leadPriceSum: 1500,\n            channelCostSum: 90000,\n            sales: 5,\n            conversionInSales: 80,\n        }\n        this.handleData = this.handleData.bind(this);\n    }\n\n    handleData(rowData) {\n        this.setState((state, props) => ({\n            rowData: state.rowData\n        }));\n        this.setState(function (state, props) {\n            let newChannelData = state.channelData;\n            newChannelData[rowData.rowId].leads = rowData.leads;\n            newChannelData[rowData.rowId].leadPrice = rowData.leadPrice;\n            newChannelData[rowData.rowId].channelCost = rowData.channelCost;\n            return {\n                channelData: newChannelData,\n            };\n        }, function () {\n            let newLeadSum = 0;\n            let newLeadPriceSum = 0;\n            let newChannelCostSum = 0;\n            for (let channel of this.state.channelData) {\n                newLeadSum += channel.leads;\n                newLeadPriceSum += channel.leadPrice;\n                newChannelCostSum += channel.channelCost;\n            }\n            console.log(newLeadSum);\n            this.setState({\n                leadSum: newLeadSum,\n                leadPriceSum: newLeadPriceSum,\n                channelCostSum: newChannelCostSum,\n            })\n        });\n    }\n\n    componentDidMount() {\n        this.setState((state, props) => ({ rows: [<Row key={\"row\" + 0} name=\"Яндекс.Директ\" opportunity={this.state.opportunity} />] }))\n    }\n\n    change = (param) => {\n        this.setState({ opportunity: param })\n        console.log(this.state.opportunity);\n    }\n\n\n\n    newChannelClick = () => {\n        this.props.handleSetCurrentForm(this.state.formId);\n    }\n\n    render() {\n        // console.log(this.props.conversions);\n        let leadSumCell = 0;\n        let leadPriceSumCell = 0;\n        let channelCostSumCell = 0;\n        for (let i of this.props.channelData) {\n            leadSumCell += parseInt(i.leads);\n            leadPriceSumCell += parseInt(i.leadPrice);\n            channelCostSumCell += parseInt(i.channelCost);\n        }\n        let resultLeadsCell = leadSumCell / 100 * this.props.conversions;\n        let resultLeadPriceCell = channelCostSumCell / resultLeadsCell;\n\n\n        return (\n            <div className=\"calcForm\">\n\n                <button type=\"button\" onClick={() => this.props.handleDeleteForm(this.props.formId)} className=\"deleteFormButton crossButton\">\n                    <svg version=\"1.1\" meta=\"vk-icons-close\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                        <path fill=\"none\" stroke=\"#000\" strokeWidth=\"1.06\" d=\"M16,16 L4,4\"></path>\n                        <path fill=\"none\" stroke=\"#000\" strokeWidth=\"1.06\" d=\"M16,4 L4,16\"></path>\n                    </svg>\n                </button>\n                <input type=\"text\" placeholder=\"Название варианта расчёта\" className='descriptionInput'/>\n                <input type=\"text\" placeholder=\"Описание расчёта\" className='descriptionInput'/>\n                <button type=\"button\" onClick={() => this.change(true)} className=\"tableButton\">ОТ ВОЗМОЖНОСТЕЙ</button>\n                <button type=\"button\" onClick={() => this.change(false)} className=\"tableButton\">ОТ БЮДЖЕТА</button>\n                <p className='info'>Посчитайте, сколько лидов и продаж можно получить при отсутствии ограничений по бюджету. Введите\n                    предельное для данной тематики количество кликов по каналам, среднюю цену клика, текущую (или\n                    среднюю для тематики) конверсию сайта и текущую конверсию из лидов в продажи.</p>\n                <table className=\"opportunityTable\">\n                    <thead>\n                        <tr>\n                            <th>КАНАЛ</th>\n                            <th>КЛИКОВ</th>\n                            <th>ЦЕНА КЛИКА</th>\n                            <th>КОНВЕРСИЯ</th>\n                            <th>ЛИДЫ</th>\n                            <th>ЦЕНА ЛИДА</th>\n                            <th>РАСХОДЫ НА КАНАЛ, РУБ</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"calculationRows\">\n                        <CalculationRows handleCalculate={this.props.handleCalculate} handleDeleteRow={this.props.handleDeleteRow} channelData={this.props.channelData} opportunity={this.state.opportunity} onDataChange={this.handleData} formId={this.props.formId} />\n                        {/* {\n                             this.state.rows\n                         }\n                         <Row key={\"row\" + this.state.rows.length} name={\"dsdss\"} opportunity={this.state.opportunity} /> */}\n                    </tbody>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <button onClick={this.newChannelClick} className=\"tableButton\" type=\"button\">НОВЫЙ КАНАЛ</button>\n                            </td>\n                            <td colSpan=\"3\">\n                                Лиды (звонки и заявки)\n                            </td>\n                            <td className=\"leadSumCell\">{leadSumCell}</td>\n                            <td className=\"leadPriceSumCell\">{leadPriceSumCell}</td>\n                            <td className=\"channelCostSumCell\">{channelCostSumCell}</td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"4\">\n                                Конверсия лидов в продажи, %\n                            </td>\n                            <td>\n                                <input type=\"text\" size=\"1\" value={this.props.conversions} className=\"resultLeadsInput\" onChange={(event) => this.props.handleConversion(this.props.formId, event.target.value)} />\n                            </td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"4\">Продажи</td>\n                            <td className=\"resultLeadsCell\">{resultLeadsCell}</td>\n                            <td className=\"resultLeadPriceCell\">{resultLeadPriceCell}</td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Form","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Form from './form.js';\n// console.log(document.querySelector('input[name=\"channelType\"]:checked'));\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentForm: 0,\n      // forms: [],\n      formData: [\n        [\n          {\n            channelName: \"Яндекс.Директ\",\n            clicks: 13000,\n            clickPrice: 130,\n            conversion: 12,\n            leads: 115,\n            leadPrice: 11300,\n            channelCost: 190000,\n          },\n        ]\n      ],\n      formSums: [\n        {\n          leadSum: 70,\n          leadPriceSum: 1500,\n          channelCostSum: 90000,\n          conversionInSales: 90,\n          // sales: 50,\n          // customerPrice: 15000,\n        }\n      ],\n      conversions: [70],\n      modalClass: \"modal\", \n    }\n    // this.handleAddChannel = this.handleAddChannel.bind(this);\n    this.handleSetCurrentForm = this.handleSetCurrentForm.bind(this);\n    this.handleDeleteRow = this.handleDeleteRow.bind(this);\n    this.handleCalculate = this.handleCalculate.bind(this);\n    this.handleDeleteForm = this.handleDeleteForm.bind(this);\n    this.handleConversion = this.handleConversion.bind(this);\n  }\n\n  // componentDidMount() {\n  //   this.setState((state, props) => ({ forms: <Form handleSetCurrentForm={this.handleSetCurrentForm} key={10} channelData={this.state.formData[0]} formId={10} /> }));\n  // }\n\n  handleSetCurrentForm(formId) {\n    this.setState({ \n      currentForm: formId,\n      modalClass: \"modal modalShow\",\n     }, function() {\n       console.log(this.state.modalClass)\n     })\n    console.log(formId);\n  }\n\n  handleConversion(formId, value) {\n    this.setState(function (state) {\n      let newConversions = state.conversions;\n      newConversions[formId] = value;\n      return {\n        conversions: newConversions,\n      }\n    }, function() {\n      console.log(this.state.conversions)\n    })\n    // console.log(formId);\n  }\n\n  handleDeleteForm(formId) {\n    this.setState(function (state) {\n      let newFormData = state.formData;\n      newFormData.splice(formId, 1);\n      let newConversions = state.conversions;\n      newConversions.splice(formId, 1);\n      // console.log(formId, rowId);\n      // console.log(newFormData);\n      return {\n        formData: newFormData,\n        conversions: newConversions,\n      }\n    }, function () {\n      // console.log(this.state.formData);\n    })\n  }\n\n  handleCalculate(formId, rowId, property, value, opportunity) {\n    this.setState(function (state) {\n      let newFormData = state.formData;\n      let newFormSums = state.formSums;\n      // newFormData[formId].splice(rowId, 1);\n      console.log(newFormSums);\n      let currentRow = newFormData[formId][rowId]\n      currentRow[property] = value;\n\n      if (opportunity) {\n        currentRow.channelCost = currentRow.clicks * currentRow.clickPrice;\n      } else {\n        currentRow.clicks = (currentRow.channelCost / currentRow.clickPrice).toFixed(2);\n      }\n\n      currentRow.leadPrice = currentRow.clickPrice * 100 / currentRow.conversion;\n      currentRow.leads = (currentRow.channelCost / Math.round(currentRow.clickPrice * 100 / currentRow.conversion)).toFixed(2);\n      let newLeadSum = 0;\n      let newLeadPriceSum = 0;\n      let newChannelCostSum = 0;\n      let currentForm = newFormData[formId];\n\n      let currentFormSums = newFormSums[formId];\n      for (let form = 0; form<currentForm.length; form++) {\n        newLeadSum += parseInt(currentForm[form].leads)\n        newLeadPriceSum += parseInt(currentForm[form].leadPrice)\n        newChannelCostSum += parseInt(currentForm[form].channelCost)\n      }\n      currentFormSums.leadSum = newLeadSum;\n      currentFormSums.leadPriceSum = newLeadPriceSum;\n      currentFormSums.channelCostSum = newChannelCostSum;\n\n      return {\n        formData: newFormData,\n        formSums: newFormSums,\n      }\n    }, function () {\n      console.log(this.state.formSums);\n    })\n  }\n\n  handleDeleteRow(formId, rowId) {\n    this.setState(function (state) {\n      let newFormData = state.formData;\n      newFormData[formId].splice(rowId, 1);\n      // console.log(formId, rowId);\n      // console.log(newFormData);\n      return {\n        formData: newFormData,\n      }\n    }, function () {\n      // console.log(this.state.formData);\n    })\n  }\n\n  // handleAddChannel(formId) {\n  //   this.setState(function (state, props) {\n  //     let newFormData = state.formData;\n  //     newFormData[formId].concat({\n  //       channelName: document.querySelector('input[name=\"channelType\"]:checked').value,\n  //       leads: 15,\n  //       leadPrice: 1300,\n  //       channelCost: 90000,\n  //     })\n  //     return {\n  //       formData: newFormData,\n\n  //     }\n  //   })\n  // }\n\n  addRow = () => {\n    // console.log(this.state.currentForm);\n    this.setState(function (state, props) {\n      let newFormData = state.formData;\n      newFormData[this.state.currentForm].push({\n        channelName: document.querySelector('input[name=\"channelType\"]:checked').value,\n        clicks: 13000,\n        clickPrice: 130,\n        conversion: 12,\n        leads: 15,\n        leadPrice: 1300,\n        channelCost: 90000,\n      })\n      // console.log(newFormData[this.state.currentForm]);\n      return {\n        formData: newFormData,\n\n      }\n    }, function () {\n      console.log(this.state.formData);\n    })\n  }\n\n  render() {\n\n    var indents = [];\n    for (var i = 0; i < this.state.formData.length; i++) {\n      indents.push(\n        <Form conversions={this.state.conversions[i]} handleConversion={this.handleConversion} handleDeleteForm={this.handleDeleteForm} handleCalculate={this.handleCalculate} handleDeleteRow={this.handleDeleteRow} handleSetCurrentForm={this.handleSetCurrentForm} key={i} channelData={this.state.formData[i]} formId={i} />\n      );\n    }\n    return (\n      <div className='container'>\n        <div className={this.state.modalClass}>\n          <form action=\"\">\n            <button className=\"close\" type=\"button\" onClick={() => this.setState({modalClass: \"modal\"})}>╳</button>\n            <h2>Добавить канал</h2>\n            <input type=\"radio\" id=\"yandex\" name=\"channelType\" value=\"Яндекс.Директ\" defaultChecked onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"yandex\">Яндекс.Директ</label><br />\n            <input type=\"radio\" id=\"google\" name=\"channelType\" value=\"Google.Adwords\" onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"google\">Google.Adwords</label><br />\n            <input type=\"radio\" id=\"seo\" name=\"channelType\" value=\"SEO\" onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"seo\">SEO</label><br />\n            <input type=\"radio\" id=\"vk\" name=\"channelType\" value=\"ВКонтакте\" onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"vk\">ВКонтакте</label><br />\n            <input type=\"radio\" id=\"ok\" name=\"channelType\" value=\"Одноклассники\" onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"ok\">Одноклассники</label><br />\n            <input type=\"radio\" id=\"email\" name=\"channelType\" value=\"Email рассылка\" onChange={(event) => this.setState({ channelType: event.target.value })} />\n            <label htmlFor=\"email\">Email рассылка</label><br />\n            <button id=\"buttonAdd\" type=\"button\" onClick={this.addRow}>Добавить</button>\n          </form>\n        </div>\n        <h1>Calculator</h1>\n        {\n          indents\n        }\n\n\n        <button className=\"tableButton\" onClick={() => this.setState(function (state) {\n          let newFormData = state.formData;\n          newFormData.push([{\n            channelName: \"Яндекс.Директ\",\n            clicks: 13000,\n            clickPrice: 130,\n            conversion: 12,\n            leads: 15,\n            leadPrice: 1300,\n            channelCost: 90000,\n          }]);\n          let newFormSums = state.formSums;\n          newFormSums.push({\n            leadSum: 60,\n            leadPriceSum: 1500,\n            channelCostSum: 90000,\n            sales: 50,\n            customerPrice: 15000,\n            conversionInSales: 80,\n          });\n          let newConversions = state.conversions;\n          newConversions.push(81);\n          return {\n            formData: newFormData,\n            formSums: newFormSums,\n            conversions: newConversions,\n          }\n        })}>Добавить расчёт</button>\n      </div>\n    )\n  }\n}\n\n\nroot.render(\n  <Container />\n);"],"sourceRoot":""}